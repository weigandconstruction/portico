defmodule <%= @module %>.Client do
  @moduledoc """
  HTTP client for <%= @module %> API.
  """

  defmodule HTTPError do
    @moduledoc """
    Represents an HTTP error response (4xx/5xx status codes).
    """
    defexception [:status, :body, :message]

    def exception({status, body}) do
      %__MODULE__{
        status: status,
        body: body,
        message: "HTTP #{status} error"
      }
    end
  end

  defmodule TransportError do
    @moduledoc """
    Represents a transport-level error (network, timeout, DNS, etc.).
    """
    defexception [:reason, :message]

    def exception(reason) do
      %__MODULE__{
        reason: reason,
        message: "Transport error: #{inspect(reason)}"
      }
    end
  end

<%= if @base_url do %>  @default_base_url "<%= @base_url %>"

  @doc """
  Creates a new client with the given options.

  Options are merged in the following order (later values override earlier ones):
  1. Application config (e.g., from config/test.exs)
  2. Default base URL (if not already set)
  3. Provided options

  ## Examples

      # Using default base URL
      client = <%= @module %>.Client.new()

      # With authentication using default URL
      client = <%= @module %>.Client.new(auth: {:bearer, "your-token"})

      # Override base URL
      client = <%= @module %>.Client.new(base_url: "https://staging.example.com")

      # Override base URL with auth
      client = <%= @module %>.Client.new(
        base_url: "https://staging.example.com",
        auth: {:bearer, "staging-token"}
      )

      # With additional options
      client = <%= @module %>.Client.new(
        timeout: 30_000,
        auth: {:bearer, "token"},
        retry: :transient
      )

  ## Application Configuration

  You can set default options in your application config:

      # config/test.exs
      config :<%= Macro.underscore(@module) %>,
        plug: {Req.Test, MyApp.MockServer}

      # config/dev.exs
      config :<%= Macro.underscore(@module) %>,
        retry: false,
        cache: true

  """
  @spec new(keyword()) :: Req.Request.t()
  def new(options \\ []) when is_list(options) do
    config_options = Application.get_env(:<%= Macro.underscore(@module) %>, :client, [])
    
    options =
      config_options
      |> Keyword.merge(options)
      |> Keyword.put_new(:base_url, @default_base_url)
      
    Req.new(options)
  end<% else %>  @doc """
  Creates a new client with the given options.

  Options are merged in the following order (later values override earlier ones):
  1. Application config (e.g., from config/test.exs)
  2. Provided options (must include base_url)

  ## Examples

      # With base URL and auth
      client = <%= @module %>.Client.new(
        base_url: "https://api.example.com",
        auth: {:bearer, "your-token"}
      )

      # Basic auth
      client = <%= @module %>.Client.new(
        base_url: "https://api.example.com",
        auth: {:basic, "user:pass"}
      )

      # With additional options
      client = <%= @module %>.Client.new(
        base_url: "https://api.example.com",
        timeout: 30_000,
        auth: {:bearer, "token"}
      )

  ## Application Configuration

  You can set default options in your application config:

      # config/test.exs
      config :<%= Macro.underscore(@module) %>,
        plug: {Req.Test, MyApp.MockServer}

      # config/dev.exs
      config :<%= Macro.underscore(@module) %>,
        retry: false,
        cache: true

  Note: base_url must still be provided in the options when creating the client.

  """
  @spec new(keyword()) :: Req.Request.t()
  def new(options) when is_list(options) do
    config_options = Application.get_env(:<%= Macro.underscore(@module) %>, :client, [])
    
    options = Keyword.merge(config_options, options)
    
    unless Keyword.has_key?(options, :base_url) do
      raise ArgumentError, "base_url is required"
    end
    
    Req.new(options)
  end<% end %>

  @doc """
  Makes an HTTP request using the provided client.

  Returns `{:ok, body}` on success (2xx status codes) or `{:error, exception}` on failure.

  ## Examples

      # GET request
      {:ok, data} = <%= @module %>.Client.request(client, method: :get, url: "/endpoint")

      # POST request with JSON body
      case <%= @module %>.Client.request(client, method: :post, url: "/endpoint", json: %{key: "value"}) do
        {:ok, body} -> handle_success(body)
        {:error, %HTTPError{status: 404}} -> handle_not_found()
        {:error, %TransportError{}} -> handle_network_error()
      end

  """
  @spec request(Req.Request.t(), keyword()) :: {:ok, any()} | {:error, Exception.t()}
  def request(client, options \\ []) do
    client
    |> clean_options(options)
    |> Req.request()
    |> case do
      {:ok, %{status: status, body: body}} when status in 200..299 ->
        {:ok, body}

      {:ok, %{status: status, body: body}} ->
        {:error, HTTPError.exception({status, body})}

      {:error, %Req.TransportError{} = error} ->
        {:error, TransportError.exception(error)}

      {:error, error} ->
        {:error, TransportError.exception(error)}
    end
  end

  # Filter out nil values from headers and params
  defp clean_options(client, options) do
    cleaned_options =
      options
      |> Enum.map(fn
        {:headers, headers} when is_list(headers) ->
          {:headers, Enum.reject(headers, fn {_k, v} -> is_nil(v) end)}

        {:params, params} when is_list(params) ->
          {:params, Enum.reject(params, fn {_k, v} -> is_nil(v) end)}

        other ->
          other
      end)

    Req.merge(client, cleaned_options)
  end
end
